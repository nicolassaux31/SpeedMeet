LES LIGNES DANS LESQUELES J'INDIQUE DES COMMANDES
COMMENCENT TOUTES PAR "---" mais cela ne fait pas partie des commandes

NAVIGATION (à travers les dossiers)

---cd /adresseprojetlocal

dirige la ligne de commandes vers ce dossier sur windows cette adresse
peut être copiée de la barre de l'explorer en changeant les \ par /.

---clear

vide la ligne de commandes (clc sur matlab)

---mkdir nomdossier

Crée un dossier 

---touch fichiercode.format

crée un fichier du format indiqué dans le repertoire dans lequel on se trouve

---git init

Initialise le versionning sur le dossier dans lequel on se trouve

---git help

	---git help commande
---ls

montre tous les fichiers et dossiers existants dans le dossier actuel



STAGES: Ajout de fichiers/dossiers à la liste de modifications réalisées
que l'on voudra sauvegarder (Staged Area)


---git add <fichier>

Ajoute un fichier à la liste de fichiers modifiés que l'on veut sauvegarder..

	---git add *.format

	Ajoute tous les fichiers avec ce format à la liste.

---git add .

Ajoute tous les fichiers du dossier dans lequel on se trouve à la liste

---git reset HEAD fichier

Enlève ce fichier de la liste

---git diff

Montre tous les fichiers qui ont étés modifiés et qui n'ont pas été ajoutés à la liste
et le contenu de ces modification. 

---git diff --cached

Montre les fichiers qui ont étés modifiés et qui ont été ajoutés à la liste

--git status

Fait les deux commandes d'avant. 


COMMITS (sauvegardes de changements) 

---git commit

Pour sauvegarder tous les changements qui sont dans le Stage en ouvrant un éditeur de texte pour décrire ces changements
Quelques commandes de l'éditeur
	---i
	permet de commencer à écrire
	---Esc
	sort du mode édition
	---:wq
	Sauvegarde l'édition et réalise le commit


---git commit -a -m 'message'

Stage tous les éléments modifiés (comme si on faisait git add .) et réalise en commit avec le message introduit

---git commit --ammend

Permet de changer le texte du commit précédent


BRANCHES

---git branch nom
crée une branche avec ce nom
 
---git merge nombranche

Rassemble la branche sur celle dans laquelle on se trouve tout en faisant un commit
Si on ne veut pas de commit (pour d'abbord résoudre le conflit à la main):
	---git merge --no-ff nombranche

---git rebase master

Envoie les commits de la branche sur laquelle ons e trouve sur master
Si ensuite on fait un merge, on aura les commits de la branche sur l'historique
du master (comme s'il n'y avait jamais eu de branche) 



REMOVE

---git rm archivo

Efface ce fichier du workspace. Si le fichier a été staged (add), pas possible
	

	---git rm -f fichier
	Force l'élimination du fichier même s'il est staged (add). 

	---git rm --cached fichier
	Efface ce fichier de la zone staged --> il est toujours existant mais il ne 
	sera pas sauvegardé en cas de commit. 


LOGS


---git log

Montre tous les commits réalisés par ordre chrono, en incluant leur titre et description
Chaque commit a une reférence (du style 4e5fg5563fga5).

	---git log --pretty=oneline
	Pareil mais montre juste leur titre et leur référence. 

	---git log --pretty=format:"%h ::: %an ::: %ar ::: %s"
	Montre tous les commits réalisés en ordre chrono avec le suivant format
	Reférence raccourcie : Nom du résponsable : date : titre

	---git log -p -n
	Montre les n derniers commits réalisés
	
	---git log --since=n.weeks
	Montre les commits réalisés pendant les n dernières semaines

	---git log --since="AAAA-MM-DD"
	Montre les commits réalisés depuis la dernière date

	---git log --author="Nombre"
	Montre les commits réalisés par cette persone
	
	---git log --before="AAAA-MM-DD"

---gitk 

Montre l'évolution des branches



REMISAGE

---git stash 

Sauvegarde toutes les modifs en "pile", pour que l'on puisse faire d'autre choses
pour plus tard revenir sur ces modifs sauvegardées. 
Permet aussi changer de branches malgré les modifs. en cours

	---git stash list
	---git stash -u 
	Sauvegarde aussi les fichiers créés. 
	---git stash apply
	Re-applique les modifs sauvegardée sans les supprimer du stash
	---git stash drop
	Supprime les derniers éléments stockés
	---git stash save Description
	Donne un nom à cette sauvegarde en stach
	---git stash show Description  (on rajoute -p pour plus de détail)
	Montre le stash sauvegardé sous ce nom
	---git stash apply Description
	---git stash pop Description 
	Applique et droppe
	---git stash branch NomBranche
	Crée une branche avec les modifs sauvegardées en stash



REVENIR AU PASSÉ

---git checkout commit/branche


---git checkout commit fichier.format

Met dans la master présente la version du fichier quil y avait
juste apres le commit choisi. Si l'on veut la sauvegarder on 
commite, si l'on veut revenir à celle qu'il y avait sur la master
on fait checkout master. 

---git revert commit

Supprime les modifs de ce commit
	---git revert commit fichier
	Supprime les modifs de ce commit sur ce fichier

---git reset HEAD nomfichier.format

Supprime du stage le fichier

---git reset --fichier.format

Efface les modifs. réalisées sur le fichier

---git reset --hard

Efface toutes les modifs. réalisées

---git reset commit

Efface tous les commits réalisés jusqu'à celui qui a été choisi, en laissant
les fichiers avec toutes les modifs réalisées depuis ce moment là (qui devront
être stagées et commitées).



REMOTE ("origin")

---git push

Sauvegarde tous les commits réalisés localement dans le serveur. 

---git push origin master

Comprend pas très bien la diff. avec la commande d'avant. 

---git push origin --all

Écrit tout sur le serveur à distance. 

---git remote -v

Montre la liste des serveurs enregistrés 

---git pull URL(fetch)

Fait une copie locale du serveur auquel on est connectés. 

---git pull --rebase origin master


Merge la branche master du serveur sur la master locale en incluant
ses commits sur les tiens comme si c'était toi qui les avait fait

	---git config --global branch.autosetuprebase always
	Impose le rebase sur tous les pulls


---git remote rename origin Nombre

Cambia el nombre que tu GIT le ha puesto al repositorio remoto (yo le puse CleanCycle)

---git push origin --delete NomBranche

Supprime la branche de remote (si on l'a supprimée en local préalablement)



TAGS: notes qui peuvent être reliées à n'importe quel commit 

---git tag

Montre les noms de toutes les tags faites

---git tag -a Nom -m 'Message'

Ajoute une tag au dernier commit réalisé

---git show Nom

Montre le contenu de la note avec ce nom

---git tag -a Nom Reference

Ouvre un éditeur pour ajouter une tag avec ce nom au commit de cette reférence 
Esq --> wq --> Enter

---git push Eucubot2018 Nom


Ajoute cette tags au serveur

	---git push Eucubot2018 --tags
	Ajoute toutes les tags au serveur





CLONNER UN SERVEUR

A)Dans la page du serveur on appuie sur fork

B)On copie l'adresse HTTPS clone URL

C)Retour vers GITBASH et ---git clone URL




ASTUCES


---ctrl+R

Permet de chercher des commandes déjà utilisées: tu tapes et t'écris le début de celle que tu 
recherches, il te proposera ce que t'as déjà fait avec le même début

---ctrl+shift+V    ou    ---ctrl+shift+C

Copier ou coller